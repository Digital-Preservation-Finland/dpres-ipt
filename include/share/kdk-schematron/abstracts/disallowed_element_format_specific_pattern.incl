<?xml version="1.0" encoding="UTF-8"?>

	<!--
	Disallow element in technical metadata for certain file format.
	context_element - METS file element
	disallowed_element - Disallowed element
	file_format - File format (mime type)
	mdtype_name - Metadata name
	context_condition - Rule launched only, if this condition is true.
	specifications - Catalog/specification versions for which the rule is launched.
		List the affected versions with space+semicolon delimiter.
		If begins with "not:", rule is launched with other but given versions.  
		If empty, launch rule by default.
	-->
	<sch:pattern id="disallowed_element_format_specific_pattern" abstract="true" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:mets="http://www.loc.gov/METS/" xmlns:fi="http://www.kdk.fi/standards/mets/kdk-extensions" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:premis="info:lc/xmlns/premis-v2" xmlns:exsl="http://exslt.org/common" xmlns:str="http://exslt.org/strings" xmlns:sets="http://exslt.org/sets">
		<sch:rule context="$context_element[($context_condition) and ancestor::mets:mets//mets:techMD//$disallowed_element]">
			<sch:assert test="(((count(exsl:node-set(ancestor::mets:mets//mets:techMD[(str:split(.//premis:formatName,';')[1])!=$file_format]/@ID))+count(sets:distinct(str:tokenize(normalize-space(@ADMID), ' '))))
			=count(sets:distinct(exsl:node-set(ancestor::mets:mets//mets:techMD[(str:split(.//premis:formatName,';')[1])!=$file_format]/@ID) | str:tokenize(normalize-space(@ADMID), ' ')))) 
			or ((count(sets:distinct(exsl:node-set(ancestor::mets:mets//mets:techMD[.//$disallowed_element]/@ID)))+count(sets:distinct(str:tokenize(normalize-space(@ADMID), ' '))))
			=count(sets:distinct(exsl:node-set(ancestor::mets:mets//mets:techMD[.//$disallowed_element]/@ID) | str:tokenize(normalize-space(@ADMID), ' '))))) or not(normalize-space($specifications)=''
			or ((normalize-space(substring($specifications,1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))
			or ((normalize-space(substring($specifications,1,4))!='not:') and ((contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))">
				Element '<sch:value-of select="name($disallowed_element)"/>' is not allowed in <sch:value-of select="$mdtype_name"/> metadata for file '<sch:value-of select="./mets:FLocat/@xlink:href"/>'.
			</sch:assert>
		</sch:rule>
	</sch:pattern>