<?xml version="1.0" encoding="UTF-8"?>

	<!--
	Case 'no-file-format-validation' check.
	context_condition - Rule launched only, if this condition is true.
	specifications - Catalog/specification versions for which the rule is launched.
		List the affected versions with space+semicolon delimiter.
		If begins with "not:", rule is launched with other but given versions.  
		If empty, launch rule by default.
	-->
	<sch:pattern id="required_features_native_pattern" abstract="true" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:mets="http://www.loc.gov/METS/" xmlns:fi="http://www.kdk.fi/standards/mets/kdk-extensions"
	xmlns:exsl="http://exslt.org/common" xmlns:sets="http://exslt.org/sets">
		<sch:rule context="mets:file[(normalize-space(@USE)='no-file-format-validation') and ($context_condition)]">
			<sch:let name="admid" value="normalize-space(@ADMID)"/> 
			<sch:let name="source_techmd_id" value="normalize-space(ancestor::mets:mets//mets:techMD/@ID[contains(concat(' ', $admid, ' '), concat(' ', normalize-space(.), ' ')) and ..//premis:object//premis:formatName])"/> 
			<sch:let name="source_object_id" value="normalize-space(ancestor::mets:mets//mets:techMD[normalize-space(@ID) = $source_techmd_id]//premis:object[.//premis:formatName]//premis:objectIdentifierValue)"/> 
			<sch:let name="events_succeeded_migrations" value="exsl:node-set(ancestor::mets:mets//mets:digiprovMD[normalize-space(.//premis:event/premis:eventType)='migration' and normalize-space(.//premis:event//premis:eventOutcome)='success'])"/>
			<sch:let name="source_link" value="exsl:node-set(ancestor::mets:mets//mets:digiprovMD//premis:linkingObjectIdentifier[normalize-space(./premis:linkingObjectRole)='source' and normalize-space(./premis:linkingObjectIdentifierValue)=$source_object_id])"/>
			<sch:let name="source_not_outcome_link" value="exsl:node-set(ancestor::mets:mets//mets:digiprovMD//premis:linkingObjectIdentifier[not(normalize-space(./premis:linkingObjectRole)='outcome' and normalize-space(./premis:linkingObjectIdentifierValue)=$source_object_id)])"/>
			<sch:let name="events_object_source" value="exsl:node-set(ancestor::mets:mets//mets:digiprovMD[count(sets:intersection(exsl:node-set(.//premis:event//premis:linkingObjectIdentifier), $source_link)) = count($source_link) and count($source_link) &gt; 0])"/>
			<sch:let name="events_object_not_outcome" value="exsl:node-set(ancestor::mets:mets//mets:digiprovMD[count(sets:intersection(exsl:node-set(.//premis:event//premis:linkingObjectIdentifier), $source_not_outcome_link)) = count($source_not_outcome_link)])"/>
			<sch:let name="events_source_outcome_ok" value="sets:intersection($events_object_source, $events_object_not_outcome)"/>
			<sch:let name="event_valid" value="sets:intersection($events_source_outcome_ok, $events_succeeded_migrations)"/>

			<sch:assert test="count($events_succeeded_migrations) &gt; 0 or not(normalize-space($specifications)=''
			or ((normalize-space(substring($specifications,1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))
			or ((normalize-space(substring($specifications,1,4))!='not:') and ((contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))">
				Value '<sch:value-of select="@USE"/>' in attribute '<sch:value-of select="name(@USE)"/>' found for file '<sch:value-of select="./mets:FLocat/@xlink:href"/>'. Succeeded PREMIS event for migration is required.
			</sch:assert>
			<sch:assert test="count($events_succeeded_migrations) = 0 or count($events_source_outcome_ok) &gt; 0 or not(normalize-space($specifications)=''
			or ((normalize-space(substring($specifications,1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))
			or ((normalize-space(substring($specifications,1,4))!='not:') and ((contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))">
				Value '<sch:value-of select="@USE"/>' in attribute '<sch:value-of select="name(@USE)"/>' found for file '<sch:value-of select="./mets:FLocat/@xlink:href"/>'. PREMIS event for migration contains ambiguous links to object identifiers.
			</sch:assert>
			<sch:assert test="count($event_valid) &gt; 0 or not(normalize-space($specifications)=''
			or ((normalize-space(substring($specifications,1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))
			or ((normalize-space(substring($specifications,1,4))!='not:') and ((contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))">
				Value '<sch:value-of select="@USE"/>' in attribute '<sch:value-of select="name(@USE)"/>' found for file '<sch:value-of select="./mets:FLocat/@xlink:href"/>'. Could not interpret proper PREMIS event for migration.
			</sch:assert>
		</sch:rule>
	</sch:pattern>
